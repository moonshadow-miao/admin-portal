<template>
  <div class="platformSelector-contianer el-input el-input--small">
    <input v-model="platformName" class="el-input__inner" @blur="blur" @focus="isShow=true" :style="{width:showCity?'49%':'100%'}"/>
    <el-select style="width: 48%" v-model="city_id" v-if="showCity" @change="handelChange">
      <el-option label="地市" value=""></el-option>
      <el-option v-for="(item ,index) in citiesOption" :key="index" :label="item.name" :value="item.id"></el-option>
    </el-select>
    <div class="platformSelector" v-show="isShow">
      <div class="platformTab">
        <dl class="clearfix">
          <dt>#</dt>
          <dd>
            <a value="" @click.stop="selectPlatform('')">全国</a>
          </dd>
        </dl>
        <dl v-for="(item ,key) in platformArr" :key="key" class="clearfix">
          <dt>{{key}}</dt>
          <dd>
            <a v-for="(name,value) in item" :key="key+''+value" :value="name.id" @click.stop="selectPlatform(name)">
              {{name.name}}
            </a>
          </dd>
        </dl>
      </div>
    </div>
  </div>

</template>

<script>
  import {CONSTANT} from '@/utils/constant';

  let time = null
  export default {
    name: "platformSelector",
    data() {
      return {
        isShow: false,
        city_id: '',
        platform_id: '',
        platformName: '',
        platformList: CONSTANT.platformList,
        citiesMap: CONSTANT.citiesMap,
        citiesOption: []
      }
    },
    props: {
      showCity: {
        type: Boolean,
        default: true
      },
      city: {
        type: [String, Number],
        default: ''
      },
      platform: {
        type: [String, Number],
        default: ''
      }
    },
    created() {
      const obj = {};
      this.platformList.forEach((item) => {
        const firstCharacter = (item.pinyin || item.shortName).slice(0, 1).toUpperCase();
        if (!obj[firstCharacter]) {
          obj[firstCharacter] = [item];
        } else {
          obj[firstCharacter].push(item);
        }
      });
      const sortObj = {};
      for (let i = 65; i < 91; i++) {
        let key = String.fromCharCode(i);
        if (obj[key]) {
          sortObj[key] = obj[key];
        }
      }
      this.platformArr = sortObj;
    },
    watch: {
      city(newVal) {
        this.city_id = newVal
      },
      platform(newVal) {
        this.platform_id = newVal
        this.platformName = this.platformList.find(item => item.id == newVal)['name'] || ''
      },
    },
    methods: {
      blur() {
        time = setTimeout(() => {
          this.isShow = false;
          clearTimeout(time)
        }, 200)
      },
      selectPlatform(obj) {
        if (!obj) {
          obj = {
            name: "全国",
            value: '',
            id: ''
          };
        }
        this.platformName = obj.name;
        this.platform_id = obj.id;
        this.$emit('update:platform', this.platform_id);
        if (this.showCity) {
          this.city_id = "";
          this.citiesOption = this.citiesMap[obj.id];
        }
      },
      handelChange() {
        this.$emit('update:city', this.city_id)
      }
    },
    beforeDestroy() {
      clearTimeout(time)
    }
  }
</script>

<style rel="stylesheet/scss" scoped lang="scss">
  .platformSelector-contianer {
    position: relative;
  }

  .platformSelector {
    width: 380px;
    border: 1px solid #B3CDC0;
    overflow: hidden;
    font-size: 12px;
    box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.3);
    position: absolute;
    z-index: 10;
    background-color: #fff;

    dl {
      margin: 0;
    }

    .platformTab dl dt {
      float: left;
      padding-left: 3px;
      color: #3a8fc8;
      text-indent: 5px;
      line-height: 25px;
      font-size: 14px;
      width: 20px;
      font-weight: 700;
    }

    .platformTab dl dd {
      margin-left: 2px;
      float: left;
      width: 326px;
    }

    .platformTab dl dd a {
      padding-left: 5px;
      min-width: 66px;
      line-height: 25px;
      display: inline-block;
      color: #333;
      text-decoration: none;
    }

  }
</style>
